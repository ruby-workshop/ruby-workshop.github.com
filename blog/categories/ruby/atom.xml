<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Ruby Workshop]]></title>
  <link href="http://ruby-workshop.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ruby-workshop.github.com/"/>
  <updated>2012-02-25T12:22:47+01:00</updated>
  <id>http://ruby-workshop.github.com/</id>
  <author>
    <name><![CDATA[Hrvoje Šimić]]></name>
    <email><![CDATA[ruby.workshop.zg@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[uvod u ruby]]></title>
    <link href="http://ruby-workshop.github.com/blog/2012/02/20/uvod-u-ruby/"/>
    <updated>2012-02-20T14:00:00+01:00</updated>
    <id>http://ruby-workshop.github.com/blog/2012/02/20/uvod-u-ruby</id>
    <content type="html"><![CDATA[<p><blockquote><p>For me the purpose of life is partly to have joy. Programmers often feel joy when they can concentrate on the creative side of programming, so Ruby is designed to make programmers happy.</p><footer><strong>Yukihiro Matsumoto</strong> <cite>The Inventor of Ruby</cite></footer></blockquote></p>

<p>Kako tebe Ruby može učiniti sretnim?</p>

<p>Hello world u Javi:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>HelloWorldApp.java </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">class</span> <span class="nc">HelloWorldApp</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello world!&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Pokretanje:</p>

<p><code>bash
javac HelloWorldApp.java
java HelloWorldApp
</code></p>

<p>Hello world u Rubyu:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>hello_world.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">print</span> <span class="s2">&quot;Hello world!&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Pokretanje:
<code>bash
ruby hello_world.rb
</code>
Kako bi na engleskom rekli računalu što želite napraviti?</p>

<p>Ruby je moćan jezik sa predivnom sintaksom. Ruby se želi što više
prilagoditi programeru i govornom jeziku, te mu brzina izvršavanja nije
prioritet.</p>

<p>Filozofija Rubya:
<blockquote><p>Everything is an object.</p></blockquote></p>

<p>Primjeri</p>

<p><code>ruby
2.class #=&gt; Fixnum
2.class.superclass #=&gt; Integer
2.class.superclass.superclass #=&gt; Numeric
2.class.superclass.superclass.superclass #=&gt; Object
2.class.superclass.superclass.superclass.superclass #=&gt; BasicObject
2.class.superclass.superclass.superclass.superclass.superclass #=&gt; nil
</code>
Čak je i "ništa" objekt:
<code>ruby
nil.class #=&gt; NilClass
</code>
<code>ruby
Class.class #=&gt; Class
Class.class.superclass #=&gt; Module
Class.class.superclass.superclass #=&gt; Object
</code>
```ruby
Object.class #=> Class
Object.class.superclass #=> Module
Object.class.superclass.superclass #=> Object</p>

<p>mind = "blown"
```
Ruby je jedan od "najobjektnijih" jezika na svijetu.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zahtjevi za rad]]></title>
    <link href="http://ruby-workshop.github.com/blog/2012/02/20/zahtjevi-za-rad/"/>
    <updated>2012-02-20T13:59:00+01:00</updated>
    <id>http://ruby-workshop.github.com/blog/2012/02/20/zahtjevi-za-rad</id>
    <content type="html"><![CDATA[<p>Za ovu radionicu trebat će vam <a href="http://www.github.com">github account</a>
i lokalno instalirana verzija rubya.</p>

<p><strong>Zašto github (osim što je najbolji)?</strong></p>

<p>Zadatke planiram objavljivati u
<a href="https://gist.github.com/">gistovima</a>, najlakšem načinu dijeljenja koda.
Nakon objave zadatak ćete moći rješiti "forkanjem".</p>

<h2>Instalacija</h2>

<p><strong>Windows</strong></p>

<p>Instalirajte <a href="http://msysgit.googlecode.com/files/Git-1.7.9-preview20120201.exe">Git for Windows</a> i <a href="http://rubyforge.org/frs/download.php/75127/rubyinstaller-1.9.2-p290.exe">Ruby</a>.</p>

<p>Odite na <em>Start > Run > cmd</em> i upišite <code>ruby -v</code>. Ukoliko vam ta komanda
vraća
<code>
ruby 1.9.2 (x) [y]
</code>
uspješno ste instalirali ruby :)</p>

<p><strong>Linux/Mac</strong></p>

<p>Instalirajte git: <code>$ sudo apt-get install git</code></p>

<p>Instalirajte RVM (Ruby Version Manager):
<code>bash
$ bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
$ source ~/.bash_profile
</code>
Nakon toga instalirajte "requirementse" za ruby. Ispišite listu
"requirementsa":
<code>
$ rvm requirements
</code>
Istalirajte ruby
<code>
$ rvm install 1.9.2
</code>
Ukoliko vam <code>$ ruby -v</code> vraća
<code>bash
ruby 1.9.2 (x) [y]
</code>
uspješno ste instalirali ruby :)</p>

<h2>Problemi sa instalacijom</h2>

<p><em>"Ne mogu instalirati Ruby! Ne dobijem takav izlaz kad upišem ruby -v."</em>
- <a href="mailto:shime.ferovac@gmail.com?subject=[ruby-workshop]%20Ne%20mogu%20instalirati%20Ruby!">mail me, baby!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[osnovni tipovi podataka]]></title>
    <link href="http://ruby-workshop.github.com/blog/2012/02/20/osnovni-tipovi-podataka/"/>
    <updated>2012-02-20T13:58:00+01:00</updated>
    <id>http://ruby-workshop.github.com/blog/2012/02/20/osnovni-tipovi-podataka</id>
    <content type="html"><![CDATA[<h2>Brojevi</h2>

<p>Počinjemo sa najjednostavnijim tipom podatka - brojem.</p>

<p>Otvorite text editor i upišite
<code>ruby
puts 1 + 4
</code></p>

<p>Spremite datoteku kao <code>rezultat.rb</code> i nakon toga pokrenite pozivom <code>ruby
calc.rb</code> iz komandne linije.</p>

<p>Trebali biste vidjeti <code>5</code> kao rezultat.</p>

<p><code>puts</code> - ispisivanje na ekran</p>

<p>Ruby razlikuje dva tipa brojeva - <em>Floatove</em> i <em>Integere</em>.</p>

<ul>
<li>Float - decimalni brojevi
<code>ruby
1.231
0.0
3.14
</code></li>
<li>Integer - cjelobrojni brojevi</li>
</ul>


<p><code>ruby
2314
1
9999999999999
-205
0
</code></p>

<p>Brojevi znaju izvoditi dosta korisnih stvari. Definirana stvar koju
broj zna izvoditi zove se <strong>metoda</strong>.</p>

<p>Primjeri metoda
```ruby</p>

<h3>abs - vraća apsolutnu vrijednost broja</h3>

<p>-2.abs #=> 2
4.abs #=> 4</p>

<h3>zero? - provjerava je li broj jednak 0</h3>

<p>0.zero? #=> true
1.zero? #=> false
0.0.zero? #=> true</p>

<h3>eql? - provjerava je li broj jednak drugom broju</h3>

<p>5.eql? 5 #=> true
6.eql? 4 #=> false
0.eql? 0.0 #=> false (zato jer nisu isti tip)</p>

<h3>round(n) - zaokružuje broj na maksimalno n decimalnih mjesta</h3>

<h3>n   argument koji šaljemo metodi, nije obavezan. ako ne pošaljemo</h3>

<h3>argument podrazumijeva se 0</h3>

<p>-2.round #=> -2
3.14.round #=> 3
3.14159.round(2) #=> 3.14
3.021.round(4) #=> 3.021
```</p>

<p><em>Kako prepoznati metodu?</em></p>

<p>Metoda koju pozivate uvijek se nalazi sa desne strane točke, a objekt
kojem govorite da napravi tu metodu sa lijeve. -- <strong>objekt.metoda</strong></p>

<p><em>Kako prepoznati argument?</em></p>

<p>Argument je ono što šaljemo sa pozivom metode. Primjer:</p>

<p><code>ruby
5.eql? 0
</code>
* <strong>5</strong> - objekt
* <strong>eql?</strong> - metoda
* <strong>0</strong> - argument</p>

<p><em>Zašto negdje koristimo zagrade kad šaljemo argument, a negdje ne?</em></p>

<p>U Rubyu zagrade kod slanja arugmenta nisu obavezne</p>

<p><code>ruby
3.14159.round 2   #=&gt; 3.14
3.14159.round(2)  #=&gt; 3.14
</code></p>

<p>U prvom primjeru u ovom poglavlju zbrajali smo brojeve. Koristili smo
<code>+</code> za to. Tako možemo koristiti i sve algebarske operacije (<code>-, +, *,
/</code>).</p>

<p><strong>Sve su ove algebarske operacije metode!</strong> - zato što je Ruby jedan od
najobjektnijih jezika na svijetu</p>

<p>Primjer
<code>ruby
2.+ 3 #=&gt; 5
2.+(3) #=&gt; 5
</code></p>

<p><em>Zašto nismo koristili točku za poziv metode + kada smo zbrajali?</em></p>

<p><code>2 + 3</code> je <strong>sintaktički šećer</strong> ili kratica za pisanje <code>1.+ 3</code> koja je
napravljena da bi nam olakšala život.</p>

<p><strong>Drill</strong></p>

<p><div><script src='https://gist.github.com/1877085.js?file='></script>
<noscript><pre><code>### Brojčano na ekranu ispišite koliko godina ima sekundi.

### Koliko imate godina ako ste start 8286 dana?</code></pre></noscript></div>
</p>

<h2>Stringovi</h2>

<p><em>String</em> je sve što se nalazi unutar navodnika.</p>

<p>Primjeri</p>

<p><code>ruby
"ruby"
'ruby'
''
""
"1"
'48304823048304802384'
</code></p>

<p><em>Kakve nam koristi od stringova?</em></p>

<p>String je tip podatka koji se najčešće koristi. Koristi se za spremanje
podataka o korisniku - korisničkog imena, emaila, lozinke...</p>

<p>Neke od string metoda
```ruby
"ruby".capitalize #=> "Ruby"
"mOzIlLa".swapcase #=> "MoZiLlA"
"github".upcase #=> "GITHUB"
"NE DERI SE!".downcase #=> "ne deri se!"</p>

<p>"mačka".reverse #=> "akčam"</p>

<p>"mačka " + "i" + " pas" #=> "mačka i pas"</p>

<p>"mačka".length #=> 5</p>

<p>"Florijan"[2] #=> "o"
```</p>

<p>Stringovi i brojevi dijele metodu <code>+</code>, ali ne smijemo koristiti druge
brojevne metode na stringovima. (nemaju smisla)</p>

<p><code>``ruby
"tata".abs #=&gt; NoMethodError: undefined method</code>abs' for "tata":String</p>

<p>2.capitalize #=> NoMethodError: undefined method `capitalize' for 2:Fixnum</p>

<p>"0".zero? #=> NoMethodError: undefined method `zero?' for "0":String
```</p>

<p>Zadnji primjer ima smisla, ali i dalje ne smijemo koristiti brojevne
metode na stringu. Zato koristimo <strong>konverziju</strong></p>

<p><code>ruby
"0".to_i.zero? #=&gt; true
</code></p>

<p>Ovime smo pretvorili string "0" u broj i onda ispitali je li jednak
nuli.</p>

<p>Koristili smo i <strong>ulančavanje</strong>, to jest ljepljenje metoda jednu na
drugu. Ulančavanje smijemo koristiti bez ograničenja.</p>

<p><code>ruby
"github".reverse.capitalize #=&gt; "Buhtig"
</code></p>

<p><strong>Drill</strong></p>

<p><div><script src='https://gist.github.com/1877184.js?file='></script>
<noscript><pre><code>### Ispišite svoje ime i prezime unatrag

### Ispišite treće slovo svog imena velikim slovom</code></pre></noscript></div>
</p>

<h2>Nizovi</h2>

<p>Nizove prepoznajemo po uglatim zagradama.</p>

<p>Primjeri nizova</p>

<p><code>ruby
[1,2,3,4]
[414,"zebra",2]
</code></p>

<p>Nizovi posjeduju nekoliko korisnih metoda</p>

<p>```ruby
[1,2,3,4].length #=> 4</p>

<p>[1,2,3,4].shuffle #=> [4,3,1,2]</p>

<p>[1,2,3,4].join ' ' #=> "1 2 3 4"</p>

<p>[1,2,3,4].each do |element|
  puts element
end #=> [1,2,3,4]</p>

<p>[1,2,3,4].each {|x| puts x} #=> [1,2,3,4]
```</p>

<p>Zanimljivo je konvertirati drugi tip podatka u niz kako bi dobili metode
niza.</p>

<p><code>ruby
"Ruby je super".split(/ /) #=&gt; ["Ruby","je","super"]
"Ruby je super".split(//) #=&gt; ["R","u","b","y","j","e","s","u","p","e","r"]
"Ruby je super".split(/ /).shuffle.join(' ') #=&gt; "je super Ruby"
</code></p>

<p><strong>Let's drill it baby</strong></p>

<p><div><script src='https://gist.github.com/1893905.js?file='></script>
<noscript><pre><code>### Napišite program koji će ispisivati string od 10 slova i 5 znamenki i to svaki put u drukčijem rasporedu

### Napišite program koji će ispisati brojeve od 1 do 10, svaki u svom redu</code></pre></noscript></div>
</p>

<h2>Intervali</h2>

<p>Interval (range) prepoznajemo po oblim zagradama:</p>

<p>Primjeri</p>

<p><code>ruby
(1..10)
(0..1)
</code></p>

<p>Korisnost: ne trebamo upisivati sve vrijednosti u niz nego koristimo
interval</p>

<p><code>ruby
(1..10).each do |x|
  puts x
end
</code></p>

<p><strong>Drill</strong></p>

<p><div><script src='https://gist.github.com/1893927.js?file='></script>
<noscript><pre><code>### Ispišite sve brojeve od 1 do 100, svaki u svom redu

### Ispišite brojeve od 17 do 32 u jednom redu, odvojite ih zarezom</code></pre></noscript></div>
</p>

<h2>Rječnici</h2>

<p>Rječnik (hash) prepoznajemo po vitičastim zagradama. Rječnik je sličan
nizu, samo što svakoj vrijednosti dodjeljuje ključ.</p>

<p>Struktura rječnika:</p>

<p><code>ruby
{ :key =&gt; :value }
</code></p>

<p>Primjeri</p>

<p>```ruby</p>

<p>karakteristike = {:linux => "zgodan", :windows => "nezgodan"}</p>

<p>karakteristike[:linux] #=> "zgodan"</p>

<p>karakteristike[:windows] #=> "nezgodan"</p>

<p>karakteristike.keys #=> [:linux,:windows]</p>

<p>karakteristike.values #=> ["zgodan","nezgodan"]</p>

<p>karakteristike[:linux] = "simpatičan"</p>

<p>karakteristike #=> {:linux => "simpatičan", :windows => "nezgodan"}</p>

<p>```</p>

<p>Ovdje je <code>karakteristike</code> varijabla, a varijable služe za spremanje
podataka za kasniju upotrebu.</p>

<p>Glavna karakteristika rječnika je da ključ jednoznačno određuje
vrijednost.</p>

<p>U rječnicima se kao ključevi najčešće koriste <strong>simboli</strong>.</p>

<p>Još primjera</p>

<p>```ruby
karakteristike = {:linux => "zgodan", :windows => "nezgodan"}</p>

<p>karakteristike.to_a #=> [[:linux, "zgodan"], [:windows, "nezgodan"]]
karakteristike.to_a.flatten #=> [:linux, "zgodan", :windows, "nezgodan"]
```</p>

<h2>Uvjeti</h2>

<p>Uvjete u rubyu ostvarujemo ključnom riječju <code>if</code>.</p>

<p><code>ruby
if &lt;something&gt; do
end
</code></p>

<p>Primjeri</p>

<p>```ruby</p>

<p>if true
  puts "bingo!"
end #=> ispisuje "bingo!"</p>

<p>if false
  puts "bingo!"
end #=> ne ispisuje ništa</p>

<p>if 3 > 2
  puts "3 je veći od 2"
end #=>  ispisuje "3 je veći od 2"</p>

<p>if 2 > 3
  puts "2 je veći od 3"
end #=> ne ispisuje ništa</p>

<p>if 2 > 3
  puts "2 je veći od 3"
else
  puts "2 nije je veći od 3"
end #=> ispisuje "2 nije veći od 3"</p>

<p>if 2 % 3 == 0
  puts "nema ostatka sa dijeljenjem"
else
  puts "ima ostatka sa dijeljenjem"
end
```</p>

<p>Negacija</p>

<p>```ruby</p>

<p>if !false do
 puts "it's true!"
end #=> ispisuje "it's true!"</p>

<p>unless false do
 puts "it's true!"
end #=> ispisuje "it's true!"
```</p>

<p>Perlovski način</p>

<p>```ruby</p>

<p>puts "it's true" if false #=> ne ispisuje ništa</p>

<p>puts "it's true" if true #=> ispisuje "it's true"</p>

<p>```</p>

<p><strong>Let's drill this shit</strong></p>

<p><div><script src='https://gist.github.com/1894357.js?file='></script>
<noscript><pre><code>### a) Ispišite sve brojeve od 1 do 1000 koji su djeljivi sa 13 ili 7

### b) Napravite novi rječnik koji će sadržavati dva ključa.
###    Ključevi: 15, 7
###          
###    Pod ključem &quot;15&quot; u ovom hashu moraju biti svi brojevi
###    od 1 do 1000 djeljivi sa 15
###    Pod ključem &quot;7&quot; u ovom hashu moraju biti svi brojevi
###    od 1 do 1000 djeljivi sa 7

### c) Ispišite koliko postoji vrijendosti za svaki ključ iz prethodnog zadatka
</code></pre></noscript></div>
</p>

<h2>Konstante</h2>

<p>Ništa pametno - slične varijablama ali spremaju jednu vrijednost koja se
ne bi trebala mijenjati.</p>

<p>Primjeri</p>

<p>```ruby
Boje = ["plava","crvena","zelena","žuta"]</p>

<p>Spol = ["muško","žensko"]</p>

<p>INSTRUMENTI = ["gitara","bubnjevi","bas gitara"]</p>

<p>IME_PSA = "Lola"
```</p>

<p>Upotreba</p>

<p>Ako se podatak kojim slučajem i promjeni znamo da će se promjeniti i na
svim ostalim mjestima, ne moramo tražiti gdje se sve koristi.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ah taj divan objektni svijet]]></title>
    <link href="http://ruby-workshop.github.com/blog/2012/02/20/ah-taj-divan-objektni-svijet/"/>
    <updated>2012-02-20T13:57:00+01:00</updated>
    <id>http://ruby-workshop.github.com/blog/2012/02/20/ah-taj-divan-objektni-svijet</id>
    <content type="html"><![CDATA[<h2>Metode</h2>

<p>Metoda je definicija više naredbi koje se obavljaju jedna iza druge.</p>

<p>Metodu prepoznajemo po ključnoj riječi <code>def</code>.</p>

<p>```ruby
def ispisi_parne
  (1..10).each do |i|</p>

<pre><code>  puts i if i % 2 == 0
</code></pre>

<p>  end
end</p>

<p>ispisi_parne
```</p>

<p>Argumente koje šaljemo metodi moramo definirati unutar zagrada.</p>

<p>```ruby</p>

<p>def ispisi_parne(limit)
  (1..limit).each do |i|</p>

<pre><code>  puts i if i % 2 == 0
</code></pre>

<p>  end
end</p>

<p>ispisi_parne(20)</p>

<p>ispisi_parne 40</p>

<p>ispisi_parne #=> ArgumentError
```</p>

<p>Pretpostavljene vrijednosti argumenata</p>

<p>```ruby
def ispisi_parne(limit = 10)
  (1..limit).each do |i|</p>

<pre><code>  puts i if i % 2 == 0
</code></pre>

<p>  end
end</p>

<p>ispisi_parne 20</p>

<p>ispisi_parne
```</p>

<p>Više argumenata</p>

<p>```ruby
def ispisi_parne(low = 1, high = 10)
  (low..high).each do |i|</p>

<pre><code>  puts i if i % 2 == 0
</code></pre>

<p>  end
end</p>

<p>ispisi_parne</p>

<p>ispisi_parne 5</p>

<p>ispisi_parne(nil,10) #=> ArgumentError
```</p>

<p><strong>DRILL</strong></p>

<p><div><script src='https://gist.github.com/1905082.js?file='></script>
<noscript><pre><code>### Napišite metodu koja prima string i vraća broj pojavljivanja slova a u tom stringu


### Napišite metodu koja prima string a ispisuje ga unazad</code></pre></noscript></div>
</p>

<p>Ruby je objektan jezik. Što to znači?</p>

<p>Pas zna lajat, mačka zna mijaukat.</p>

<p>Nove objekte u Rubyu radimo pomoću <strong>klasa</strong>. Klasa nije ništa drugo
nego nacrt objekta.</p>

<p>```ruby
class Dog
  def run</p>

<pre><code>"running like a boss..."
</code></pre>

<p>  end</p>

<p>  def come</p>

<pre><code>"just a second!"
</code></pre>

<p>  end</p>

<p>  def bark</p>

<pre><code>"woof!"
</code></pre>

<p>  end
end</p>

<p>pas = Dog.new</p>

<p>pas.bark #=> "woof!"</p>

<p>pas.run #=> "running like a boss..."</p>

<p>pas.come #=> "just a second!"</p>

<p>pas.class #=> Dog</p>

<p>pag.is_a? Dog #=> true
```</p>

<p>Zašto koristiti objektno programiranje?</p>

<p>```ruby</p>

<h3>Lakše je za čitati</h3>

<h3>Ispitivanje parnosti</h3>

<p>17 % 2 == 0 #=> false</p>

<h3>ili</h3>

<p>17.even? #=> false</p>

<p>17.odd? #=> true</p>

<p>```</p>

<p>Recimo da želimo udvostručiti broj.</p>

<p>```ruby
def udvostruci(broj)
  broj * 2
end</p>

<p>udvostruci 4 #=> 8</p>

<p>udvostruci 5 #=> 25</p>

<h3>Što je ovdje objekt?</h3>

<p>```</p>

<p>Objektni način</p>

<p>```ruby
class Numeric
  def udvostruci</p>

<pre><code>self * 2
</code></pre>

<p>  end
end</p>

<p>2.udvostruci #=> 4
```</p>

<p>Klasne i objektne varijable</p>

<p>```ruby
class Dog</p>

<p>  def name=(name)</p>

<pre><code>@name = name
</code></pre>

<p>  end</p>

<p>  def name</p>

<pre><code>@name
</code></pre>

<p>  end</p>

<p>end</p>

<p>dog = Dog.new</p>

<p>dog.name = "Lola"</p>

<p>dog.name #=> "Lola"
```</p>

<p>```ruby
class Dog
  attr_accessor :name
end</p>

<p>dog = Dog.new</p>

<p>dog.name = "Lola"</p>

<p>dog.name #=> "Lola"
```</p>

<p><strong> HARDCORE DRILL (PRIJEMNI) </strong></p>

<p><div><script src='https://gist.github.com/1905292.js?file='></script>
<noscript><pre><code>### 1. Create user class by implementing
### a. properties
### i. user_id
### ii. username
### iii. password
### iv. email
### b. methods
### i. greet (learn user to say &quot;Hi! My name is &lt;name&gt;, nice to meet you.&quot;
###

### 2. Create recursive function that returns result for x^y

### 3. Write a program that prints the numbers from 1 to 100. But for multiples of three
### print “Fizz” instead of the number and for the multiples of five print “Buzz”. For
### numbers which are multiples of both three and five print “FizzBuzz”.

### 4. Find the largest integer value in array (all values in array are integers)
</code></pre></noscript></div>
</p>

<p><a href="http://code.google.com/codejam/contest/dashboard?c=351101#s=p1">MOAR?</a></p>
]]></content>
  </entry>
  
</feed>
